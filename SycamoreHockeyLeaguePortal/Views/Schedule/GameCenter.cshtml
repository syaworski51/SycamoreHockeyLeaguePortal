@model SycamoreHockeyLeaguePortal.Models.Game
@inject SycamoreHockeyLeaguePortal.Data.ApplicationDbContext _context

@{
    HeadToHeadSeries matchup = ViewBag.Matchup;
    PlayoffSeries? series = ViewBag.PlayoffSeries;
    List<Game> results = ViewBag.Results;
    List<Standings> teamStats = ViewBag.TeamStats;

    ViewData["Title"] = Model.Period == 0 ?
        $"{Model.Date.ToString("yyyy-MM-dd")} - {Model.AwayTeam.Code} @ {Model.HomeTeam.Code}" :
        $"{Model.Date.ToString("yyyy-MM-dd")} - {Model.AwayTeam.Code} {Model.AwayScore} - {Model.HomeScore} {Model.HomeTeam.Code} ({Model.ShortStatus})";

    string GetTeamString(Team team)
    {
        int teamsInSameCity = _context.Teams.Count(t => t.City == team.City);
        if (teamsInSameCity > 1)
            return team.AlternateName!;

        return team.City;
    }

    string GetSeasonSeriesScoreString()
    {
        if (Model.Type == "Playoffs")
            return series.SeriesScoreString;
        else
        {
            if (teamStats[0].Conference != teamStats[1].Conference)
            {
                int gamesPlayed = results.Count;

                return gamesPlayed switch
                {
                    0 => "First-Ever Meeting!",
                    1 => "Last Meeting",
                    _ => $"Last {gamesPlayed} Meetings"
                };
            }
            else
            {
                int gamesPlayed = results.Count(r => r.IsFinalized);
                bool seriesComplete = gamesPlayed == results.Count;

                string verb;
                Team? leader;
                int leadingScore;
                int trailingScore;
                if (matchup.Team1Wins == matchup.Team2Wins)
                {
                    verb = seriesComplete ? "split" : "is tied";
                    leader = (matchup.Team1GoalsFor != matchup.Team2GoalsFor) ?
                        ((matchup.Team1GoalsFor > matchup.Team2GoalsFor) ? matchup.Team1 : matchup.Team2) : null;

                    leadingScore = Math.Max(matchup.Team1GoalsFor, matchup.Team2GoalsFor);
                    trailingScore = Math.Min(matchup.Team1GoalsFor, matchup.Team2GoalsFor);
                    string scoreString = $"Season series {verb} {matchup.Team1Wins}-{matchup.Team2Wins}";

                    if (gamesPlayed > 0)
                    {
                        scoreString += $" (Agg. {leadingScore}-{trailingScore}";

                        if (leader != null)
                            scoreString += $" {leader.Code})";
                        else
                            scoreString += ")";
                    }

                    return scoreString;
                }
                else
                {
                    leader = (matchup.Team1Wins > matchup.Team2Wins) ? matchup.Team1 : matchup.Team2;
                    if (leader.City == "New York")
                        verb = seriesComplete ? "win" : "lead";
                    else
                        verb = seriesComplete ? "wins" : "leads";

                    leadingScore = Math.Max(matchup.Team1Wins, matchup.Team2Wins);
                    trailingScore = Math.Min(matchup.Team1Wins, matchup.Team2Wins);

                    return $"{GetTeamString(leader)} {verb} season series {leadingScore}-{trailingScore}";
                }
            }
        }
    }

    string GetRankingString(int ranking)
    {
        return $"{ranking}{DetermineOrdinalSuffix(ranking)}";
    }

    string GetDivisionRankingString(Standings team, int ranking)
    {
        if (teamStats[0].Division == teamStats[1].Division)
            return GetRankingString(ranking);

        Dictionary<string, string> divisions = new();
        divisions.Add("Atlantic", "A");
        divisions.Add("East", "E");
        divisions.Add("Metropolitan", "M");
        divisions.Add("Northeast", "NE");
        divisions.Add("Southeast", "SE");
        divisions.Add("Central", "C");
        divisions.Add("Northwest", "NW");
        divisions.Add("Pacific", "P");
        divisions.Add("West", "W");

        string division = divisions[team.Division!.Name.Replace(" Division", "")];
        return $"{division}{ranking}";
    }

    string GetPlayoffRankingString(Standings team, int ranking)
    {
        if (teamStats[0].Conference == teamStats[1].Conference)
            return GetRankingString(ranking);

        Dictionary<string, string> conferences = new();
        conferences.Add("Eastern", "E");
        conferences.Add("Western", "W");

        string conference = conferences[team.Conference!.Name.Replace(" Conference", "")];
        return $"{conference}{ranking}";
    }

    string DetermineOrdinalSuffix(int value)
    {
        int last2Digits = value % 100;
        if (last2Digits >= 11 && last2Digits <= 13)
            return "th";

        return (value % 10) switch
        {
            1 => "st",
            2 => "nd",
            3 => "rd",
            _ => "th"
        };
    }

    string GetGameDateString(DateTime date)
    {
        return date.Year == DateTime.Now.Year ?
            date.ToString("ddd, MMM d") :
            date.ToString("MMM d, yyyy");
    }

    string IsCurrentGame(Game game) =>
        game.Id == Model.Id ?
            "current-game" :
            (game.IsConfirmed ? "" : "unconfirmed-game");
}


<div class="container game">
    <div class="row">
        <div class="col-12" id="game-notes">
            @(Model.Notes != "" ? Model.Notes : Model.Date.ToLongDateString())
        </div>
    </div>
    <div class="row">
        <div class="col-3 away-team">
            <h5>@Html.DisplayFor(model => model.AwayTeam.City)</h5>
            <h1 class="team-name">@Html.DisplayFor(model => model.AwayTeam.Name)</h1>
        </div>
        <div class="col-2 team-logo">
            <img class="logo" src="~/@Model.AwayTeam.LogoPath" />
        </div>
        <div class="col score" id="away-score">
            @(Model.Status != "Not started" ? Html.DisplayFor(model => model.AwayScore) : "-")
        </div>
        <div class="col score" id="home-score">
            @(Model.Status != "Not started" ? Html.DisplayFor(model => model.HomeScore) : "-")
        </div>
        <div class="col-2 team-logo">
            <img class="logo" src="~/@Model.HomeTeam.LogoPath" />
        </div>
        <div class="col-3 home-team">
            <h5>@Html.DisplayFor(model => model.HomeTeam.City)</h5>
            <h1 class="team-name">@Html.DisplayFor(model => model.HomeTeam.Name)</h1>
        </div>
    </div>
    <div class="row">
        <div class="col-12" id="game-status">
            <div class="status">@Html.DisplayFor(model => model.Status)</div>
        </div>
    </div>
    <div class="row" style="margin-top: 30px; margin-bottom: 30px;">
        <div class="col">
            @if (Model.Type == "Regular Season")
            {
                <a asp-action="Index" asp-route-weekOf="@Model.Date.ToString("yyyy-MM-dd")">Back to Schedule</a>
            }
            else
            {
                <a asp-action="ReturnToPlayoffsSchedule" 
                asp-route-season="@Model.Date.Year" 
                asp-route-round="@Model.PlayoffRound!.Index"
                asp-route-date="@Model.Date.ToString("yyyy-MM-dd")">Back to Playoffs</a>
            }
        </div>
    </div>
</div>

<div class="container head-to-head">
    <div class="row">
        <div class="col-8 comparison">
            <table class="table">
                <thead>
                    <tr>
                        <th colspan="2"></th>
                        <th>W-L</th>
                        <th>Win %</th>
                        <th>RW</th>
                        <th>ROW</th>
                        <th>L10</th>
                        <th>Division</th>
                        <th>Playoffs</th>
                        <th>League</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var team in teamStats)
                    {
                        <tr>
                            <td class="col-1">
                                <img src="~/@team.Team.LogoPath" width="25" height="25" />
                            </td>
                            <td class="col-3">@team.Team.FullName</td>
                            <td class="col-1">@team.Record_2024Format</td>
                            <th class="col-1">@team.WinPct</th>
                            <td class="col-1">@team.RegulationWins</td>
                            <td class="col-1">@team.RegPlusOTWins</td>
                            <td class="col-1">@team.RecordInLast10Games</td>
                            <td class="col-1">@GetDivisionRankingString(team, team.DivisionRanking)</td>
                            <td class="col-1">@GetPlayoffRankingString(team, team.PlayoffRanking)</td>
                            <td class="col-1">@GetRankingString(team.LeagueRanking)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="col-4 results">
            <table class="table">
                <thead>
                    <tr>
                        <th colspan="5">@GetSeasonSeriesScoreString()</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var game in results)
                    {
                        <tr class="@IsCurrentGame(game)">
                            <td class="col-2">
                                <img class="team-logo" src="~/@game.AwayTeam.LogoPath" />
                            </td>
                            <td class="col-2" style="font-size: 22pt;">
                                @(game.Period > 0 ? game.AwayScore : " ")
                            </td>
                            <td class="col-4">
                                @GetGameDateString(game.Date)
                                @if (game.Period > 0)
                                {
                                    <br />@game.Status
                                }
                            </td>
                            <td class="col-2" style="font-size: 22pt;">
                                @(game.Period > 0 ? game.HomeScore : " ")
                            </td>
                            <td class="col-2">
                                <img class="team-logo" src="~/@game.HomeTeam.LogoPath" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>