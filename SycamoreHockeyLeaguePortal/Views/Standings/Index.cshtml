@model List<SycamoreHockeyLeaguePortal.Models.Standings>
@inject SycamoreHockeyLeaguePortal.Data.ApplicationDbContext _context

@{
    ViewData["Title"] = $"{ViewBag.Season} Standings";

    string viewBy = ViewBag.ViewBy;
    int season = ViewBag.Season;

    string GetName(Team team)
    {
        var teamsInSameCity = _context.Teams
            .Where(t => t.City == team.City);

        if (teamsInSameCity.Count() > 1)
            return team.AlternateName!;

        return team.City;
    }

    string GetStreak(Standings teamStats)
    {
        if (teamStats.Streak != 0)
        {
            string type = (teamStats.Streak > 0) ? "W" : "L";
            int duration = Math.Abs(teamStats.Streak);
            return $"{type} {duration}";
        }

        return "--";
    }

    string GetColor(int value)
    {
        if (value > 0)
            return "text-success";

        if (value < 0)
            return "text-danger";

        return "text-dark";
    }

    string IsRowPlayoffCutoff(int rank, int cutoff)
    {
        return (rank == cutoff) ?
            "1px solid black" :
            "1px solid #b3b3b3";
    }

    string GetGoalDifferentialString(int gd)
    {
        if (gd > 0)
            return $"+{gd}";

        return gd.ToString();
    }

    List<List<Standings>> GetStandingsByDivision(string conference)
    {
        List<List<Standings>> standings = new List<List<Standings>>();

        var divisions = _context.Alignments
            .Where(s => s.Season.Year == season &&
                        s.Conference.Code == conference)
            .Select(d => d.Division)
            .Distinct();

        foreach (var division in divisions)
        {
            standings.Add(new List<Standings>());

            var teams = Model
                .Where(s => s.DivisionId == division.Id);

            foreach (var team in teams)
                standings.Last().Add(team);
        }

        return standings;
    }

    List<Standings> GetTeamsAtPosition(string conference, int highestPosition, int? lowestPosition = null)
    {
        List<Standings> teams = new List<Standings>();

        var divisions = _context.Alignments
            .Where(s => s.Season.Year == season &&
                        s.Conference.Code == conference)
            .Select(s => s.Division)
            .Distinct();

        if (lowestPosition != null)
        {
            for (int position = highestPosition; position <= lowestPosition; position++)
            {
                foreach (var division in divisions)
                {
                    var divisionStandings = Model
                        .Where(s => s.DivisionId == division.Id)
                        .ToList();

                    teams.Add(divisionStandings[position - 1]);
                }
            }
        }
        else
        {
            foreach (var division in divisions)
            {
                var divisionStandings = Model
                    .Where(s => s.DivisionId == division.Id)
                    .ToList();

                teams.Add(divisionStandings[highestPosition - 1]);
            }
        }



        return teams;
    }

    List<Standings> GetLeaders(string conference)
    {
        return GetTeamsAtPosition(conference, 1);
    }

    List<Standings> Get2ndPlaceTeams(string conference)
    {
        return GetTeamsAtPosition(conference, 2);
    }

    List<Standings> GetWildCards(string conference)
    {
        return GetTeamsAtPosition(conference, 3, 4);
    }

    string GetBadgeClass(int season, string playoffStatus)
    {
        string clinchedPresidentsTrophy = "bg-warning text-dark";
        string clinchedConference = "bg-success";
        string clinchedDivision = "bg-success";
        string clinchedHomeIceAdvantage = "bg-primary";
        string clinched2021PlayoffSpot = "bg-primary";
        string clinchedPlayoffSpot = "bg-secondary";
        string eliminated = "bg-danger";

        if (season == 2021)
        {
            switch (playoffStatus)
            {
                case "z":
                    return clinchedPresidentsTrophy;

                case "y":
                    return clinchedDivision;

                case "e":
                    return eliminated;

                default:
                    return clinched2021PlayoffSpot;
            }
        }
        else
        {
            switch (playoffStatus)
            {
                case "P":
                    return clinchedPresidentsTrophy;

                case "Z":
                    return clinchedConference;

                case "Y":
                    return clinchedDivision;

                case "X":
                    return clinchedHomeIceAdvantage;

                case "e":
                    return eliminated;

                default:
                    return clinchedPlayoffSpot;
            }
        }
    }

    string GetPlayoffStatusDescription(string symbol)
    {
        var description = _context.PlayoffStatuses
            .Where(ps => ps.Symbol == symbol &&
                         season >= ps.ActiveFrom &&
                         (season <= ps.ActiveTo || ps.ActiveTo == null))
            .Select(ps => ps.Description)
            .FirstOrDefault()!;

        return description;
    }

    string GetNextGame(Standings team)
    {
        var nextGame = _context.Schedule
            .Where(s => s.Season.Year == season &&
                        (s.AwayTeamId == team.TeamId ||
                         s.HomeTeamId == team.TeamId) &&
                        !s.IsLive && s.Period == 0)
            .First();

        string month = nextGame.Date.Month.ToString();
        string day = string.Format("{0:D2}", nextGame.Date.Day);
        bool isHomeOrAway = nextGame.HomeTeamId == team.TeamId;
        string homeOrAway = isHomeOrAway ? "vs" : "@";
        Team opponent = isHomeOrAway ? nextGame.AwayTeam : nextGame.HomeTeam;

        return $"{month}/{day} {homeOrAway} {opponent.Code}";
    }
}

<h1>@ViewBag.Title</h1>

<form asp-action="Index" method="get" id="standings-options">
    <div class="container">
        <div class="row">
            <div class="col">
                Season:
                @Html.DropDownList("season", (IEnumerable<SelectListItem>)ViewBag.Seasons, new { onchange = "submit()" })
            </div>
            <div class="col">
                View by:
                @Html.DropDownList("viewBy", (IEnumerable<SelectListItem>)ViewBag.SortOptions, new { onchange = "submit()" })
            </div>
            <div class="col-6 container" id="standings-links">
                <div class="row">
                    <div class="col-3">
                        <a asp-action="Tiebreakers">Tiebreakers</a>
                    </div>
                    <div class="col-3">
                        <a asp-action="PlayoffFormat">Playoff Format</a>
                    </div>
                    <div class="col-6">
                        <a asp-action="PlayoffMatchups" asp-route-season="@ViewBag.Season">If the playoffs started today...</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

<div id="standings-area">
    @if (ViewBag.ViewBy == "division")
    {
        <partial name="Views/ByDivision.cshtml" />
    }
    else if (ViewBag.ViewBy == "conference")
    {
        <partial name="Views/ByConference.cshtml" />
    }
    else if (ViewBag.ViewBy == "playoffs")
    {
        <partial name="Views/ByPlayoffPositions.cshtml" />
    }
    else
    {
        ViewBag.Teams = Model;

        <h3>Sycamore Hockey League</h3>
        if (season < 2024)
        {
            <partial name="Views/Formats/2021-2023.cshtml" />
        }
        else
        {
            <partial name="Views/Formats/2024-Present.cshtml" />
        }
    }
</div>


<div class="accordion accordion-flush" id="standings-accordion">
    <div class="accordion-item" id="legend-section">
        <h2 class="accordion-header" id="legend-header">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#legend-collapse" aria-expanded="false" aria-controls="legend-collapse">Legend</button>
        </h2>
        <div class="accordion-collapse collapse" id="legend-collapse" aria-labelledby="legend-header" data-bs-parent="#standings-accordion">
            <div class="accordion-body container">
                <partial name="AccordionSections/_Legend.cshtml" />
            </div>
        </div>
    </div>
    <div class="accordion-item" id="tiebreakers-section">
        <h2 class="accordion-header" id="tiebreakers-header">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#tiebreakers-collapse" aria-expanded="false" aria-controls="tiebreakers-collapse">Tiebreakers</button>
        </h2>
        <div class="accordion-collapse collapse" id="tiebreakers-collapse" aria-labelledby="tiebreakers-header" data-bs-parent="#standings-accordion">
            <div class="accordion-body">
                <partial name="AccordionSections/_Tiebreakers.cshtml" />
            </div>
        </div>
    </div>
    <div class="accordion-item" id="calculating-games-behind-section">
        <h2 class="accordion-header" id="calculating-games-behind-header">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#calculating-games-behind-collapse" aria-expanded="false" aria-controls="calculating-games-behind-collapse">Calculating Games Behind</button>
        </h2>
        <div class="accordion-collapse collapse" id="calculating-games-behind-collapse" aria-labelledby="calculating-games-behind-header" data-bs-parent="#standings-accordion">
            <div class="accordion-body">
                <partial name="AccordionSections/_CalculatingGamesBehind.cshtml" />
            </div>
        </div>
    </div>
    <div class="accordion-item" id="playoff-format-section">
        <h2 class="accordion-header" id="playoff-format-header">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#playoff-format-collapse" aria-expanded="false" aria-controls="playoff-format-collapse">Playoff Format</button>
        </h2>
        <div class="accordion-collapse collapse" id="playoff-format-collapse" aria-labelledby="playoff-format-header" data-bs-parent="#standings-accordion">
            <div class="accordion-body">
                <partial name="AccordionSections/_PlayoffFormat.cshtml" />
            </div>
        </div>
    </div>
</div>