@model IEnumerable<SycamoreHockeyLeaguePortal.Models.Standings>
@inject SycamoreHockeyLeaguePortal.Data.ApplicationDbContext _context

@{
    ViewData["Title"] = $"{ViewBag.Season} Standings";

    string viewBy = ViewBag.ViewBy;
    int season = ViewBag.Season;

    string GetName(Team team)
    {
        var teamsInSameCity = _context.Team
            .Where(t => t.City == team.City);

        if (teamsInSameCity.Count() > 1)
            return team.AlternateName;

        return team.City;
    }

    string GetStreak(Standings teamStats)
    {
        if (teamStats.Streak != 0)
        {
            string type = (teamStats.Streak > 0) ? "W" : "L";
            int duration = Math.Abs(teamStats.Streak);
            return $"{type} {duration}";
        }

        return "--";
    }

    string GetColor(int value)
    {
        if (value > 0)
            return "text-success";

        if (value < 0)
            return "text-danger";

        return "text-dark";
    }

    string IsRowPlayoffCutoff(int rank, int cutoff)
    {
        return (rank == cutoff) ?
            "1px solid black" :
            "1px solid #b3b3b3";
    }

    string GetGoalDifferentialString(int gd)
    {
        if (gd > 0)
            return $"+{gd}";

        return gd.ToString();
    }

    List<List<Standings>> GetStandingsByDivision(string conference)
    {
        List<List<Standings>> standings = new List<List<Standings>>();

        var divisions = _context.Alignment
            .Where(s => s.Season.Year == season &&
                        s.Conference.Code == conference)
            .Select(d => d.Division)
            .Distinct();

        foreach (var division in divisions)
        {
            standings.Add(new List<Standings>());

            var teams = Model
                .Where(s => s.DivisionId == division.Id);

            foreach (var team in teams)
                standings.Last().Add(team);
        }

        return standings;
    }

    List<Standings> GetTeamsAtPosition(string conference, int highestPosition, int? lowestPosition = null)
    {
        List<Standings> teams = new List<Standings>();

        var divisions = _context.Alignment
            .Where(s => s.Season.Year == season &&
                        s.Conference.Code == conference)
            .Select(s => s.Division)
            .Distinct();

        if (lowestPosition != null)
        {
            for (int position = highestPosition; position <= lowestPosition; position++)
            {
                foreach (var division in divisions)
                {
                    var divisionStandings = Model
                        .Where(s => s.DivisionId == division.Id)
                        .ToList();

                    teams.Add(divisionStandings[position - 1]);
                }
            }
        }
        else
        {
            foreach (var division in divisions)
            {
                var divisionStandings = Model
                    .Where(s => s.DivisionId == division.Id)
                    .ToList();

                teams.Add(divisionStandings[highestPosition - 1]);
            }
        }



        return teams;
    }

    List<Standings> GetLeaders(string conference)
    {
        return GetTeamsAtPosition(conference, 1);
    }

    List<Standings> Get2ndPlaceTeams(string conference)
    {
        return GetTeamsAtPosition(conference, 2);
    }

    List<Standings> GetWildCards(string conference)
    {
        return GetTeamsAtPosition(conference, 3, 4);
    }

    string GetBadgeClass(int season, string playoffStatus)
    {
        string clinchedPresidentsTrophy = "bg-warning text-dark";
        string clinchedConference = "bg-success";
        string clinchedDivision = "bg-success";
        string clinchedHomeIceAdvantage = "bg-primary";
        string clinched2021PlayoffSpot = "bg-primary";
        string clinchedPlayoffSpot = "bg-secondary";
        string eliminated = "bg-danger";

        if (season == 2021)
        {
            switch (playoffStatus)
            {
                case "z":
                    return clinchedPresidentsTrophy;

                case "y":
                    return clinchedDivision;

                case "e":
                    return eliminated;

                default:
                    return clinched2021PlayoffSpot;
            }
        }
        else
        {
            switch (playoffStatus)
            {
                case "P":
                    return clinchedPresidentsTrophy;

                case "Z":
                    return clinchedConference;

                case "Y":
                    return clinchedDivision;

                case "X":
                    return clinchedHomeIceAdvantage;

                case "e":
                    return eliminated;

                default:
                    return clinchedPlayoffSpot;
            }
        }
    }

    string GetPlayoffStatusDescription(string symbol)
    {
        var description = _context.PlayoffStatus
            .Where(ps => ps.Symbol == symbol &&
                         season >= ps.ActiveFrom &&
                         (season <= ps.ActiveTo || ps.ActiveTo == null))
            .Select(ps => ps.Description)
            .FirstOrDefault()!;

        return description;
    }
}

<h1>@ViewBag.Title</h1>

<form asp-action="Index" method="get">
    <div class="container">
        <div class="row">
            <div class="col">
                Season:
                @Html.DropDownList("season", (IEnumerable<SelectListItem>)ViewBag.Seasons, new { onchange = "submit()" })
            </div>
            <div class="col">
                View by:
                @Html.DropDownList("viewBy", (IEnumerable<SelectListItem>)ViewBag.SortOptions, new { onchange = "submit()" })
            </div>
            <div class="col-5">
                <a asp-action="Tiebreakers">Tiebreakers</a>
                <a asp-action="PlayoffFormat">Playoff Format</a>
                <a asp-action="PlayoffMatchups" asp-route-season="@ViewBag.Season">If the playoffs started today...</a>
            </div>
        </div>
    </div>
</form>

@if (ViewBag.ViewBy == "division")
{
    var conferences = _context.Standings
        .Where(s => s.Season.Year == season)
        .Select(s => s.Conference.Name)
        .Distinct();

    foreach (var conference in conferences)
    {
        <h3>@conference</h3>

        var divisions = _context.Standings
            .Where(s => s.Season.Year == season &&
                        s.Conference.Name == conference)
            .Select(s => s.Division.Name)
            .Distinct();

        foreach (var division in divisions)
        {
            <h5>@division</h5>

            var teams = Model
                .Where(s => s.Season.Year == season &&
                            s.Conference.Name == conference &&
                            s.Division.Name == division);

            <table class="table standings">
                <thead>
                    <tr>
                        @if (season < 2024)
                        {
                            <th>
                                #
                            </th>
                            <th colspan="2">
                                @Html.DisplayNameFor(model => model.Team)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.GamesPlayed)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.Wins)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.Losses)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.OTLosses)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.GoalsFor)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.GoalsAgainst)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.GoalDifferential)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.Points)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.PointsPct)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Streak)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.RegulationWins)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.RegPlusOTWins)
                            </th>
                            <th class="record-column">
                                @Html.DisplayNameFor(model => model.RecordVsDivision_2021Format)
                            </th>
                            @if (ViewBag.Season > 2021) 
                            {
                                <th class="record-column">
                                    @Html.DisplayNameFor(model => model.RecordVsConference_2021Format)
                                </th>
                            }
                            <th class="record-column">
                                @Html.DisplayNameFor(model => model.InterConfRecord_2021Format)
                            </th>
                        }
                        else
                        {
                            <th>
                                #
                            </th>
                            <th colspan="2">
                                @Html.DisplayNameFor(model => model.Team)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.GamesPlayed)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.Wins)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.Losses)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.WinPct)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.DivisionGamesBehind)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.GoalsFor)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.GoalsAgainst)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.GoalDifferential)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Streak)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.RegulationWins)
                            </th>
                            <th class="fixed-column">
                                @Html.DisplayNameFor(model => model.RegPlusOTWins)
                            </th>
                            <th class="record-column">
                                @Html.DisplayNameFor(model => model.RecordVsDivision_2024Format)
                            </th>
                            <th class="record-column">
                                @Html.DisplayNameFor(model => model.RecordVsConference_2024Format)
                            </th>
                            <th class="record-column">
                                @Html.DisplayNameFor(model => model.InterConfRecord_2024Format)
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @{
                        int rank = 1;

                        foreach (var item in teams)
                        {
                            <tr>
                                @if (item.Season.Year < 2024)
                                {
                                    <th>
                                        @rank
                                    </th>
                                    <td class="team-logo">
                                        <img src="~/@item.Team.LogoPath" width="25" height="25" />
                                    </td>
                                    <td class="team-name">
                                        @item.Team.FullName
                                        @if (item.PlayoffStatus != "")
                                        {
                                            <span class="badge @GetBadgeClass(season, item.PlayoffStatus!)" title="@GetPlayoffStatusDescription(item.PlayoffStatus!)">@item.PlayoffStatus</span>
                                        }
                                    </td>
                                    <td class="text-secondary">
                                        @Html.DisplayFor(modelItem => item.GamesPlayed)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Wins)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Losses)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.OTLosses)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.GoalsFor)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.GoalsAgainst)
                                    </td>
                                    <td class="@GetColor(item.GoalDifferential)">
                                        @GetGoalDifferentialString(item.GoalDifferential)
                                    </td>
                                    <th>
                                        @Html.DisplayFor(modelItem => item.Points)
                                    </th>
                                    <td>
                                        @string.Format("{0:F1}", item.PointsPct)
                                    </td>
                                    <td class="@GetColor(item.Streak)">
                                        @GetStreak(item)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.RegulationWins)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.RegPlusOTWins)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.RecordVsDivision_2021Format)
                                    </td>
                                    @if (ViewBag.Season > 2021)
                                    {
                                        <td>
                                            @Html.DisplayFor(modelItem => item.RecordVsConference_2021Format)
                                        </td>
                                    }
                                    <td>
                                        @Html.DisplayFor(modelItem => item.InterConfRecord_2021Format)
                                    </td>
                                }
                                else
                                {
                                    <th>
                                        @rank
                                    </th>
                                    <td class="team-logo">
                                        <img src="~/@item.Team.LogoPath" width="25" height="25" />
                                    </td>
                                    <td class="team-name">
                                        @item.Team.FullName
                                        @if (item.PlayoffStatus != "")
                                        {
                                            <span class="badge @GetBadgeClass(season, item.PlayoffStatus!)" title="@GetPlayoffStatusDescription(item.PlayoffStatus!)">@item.PlayoffStatus</span>
                                        }
                                    </td>
                                    <td class="text-secondary">
                                        @Html.DisplayFor(modelItem => item.GamesPlayed)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Wins)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Losses)
                                    </td>
                                    <th>
                                        @string.Format("{0:F1}", item.WinPct)
                                    </th>
                                    <td>
                                        @(item.DivisionGamesBehind > 0 ? 
                                            string.Format("{0:F1}", item.DivisionGamesBehind) : 
                                            "--")
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.GoalsFor)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.GoalsAgainst)
                                    </td>
                                    <td class="@GetColor(item.GoalDifferential)">
                                        @GetGoalDifferentialString(item.GoalDifferential)
                                    </td>
                                    <td class="@GetColor(item.Streak)">
                                        @GetStreak(item)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.RegulationWins)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.RegPlusOTWins)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.RecordVsDivision_2024Format)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.RecordVsConference_2024Format)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.InterConfRecord_2024Format)
                                    </td>
                                }
                            </tr>

                            rank++;
                        }

                        _context.SaveChanges();
                    }
                </tbody>
            </table>
        }
    }
}
else if (ViewBag.ViewBy == "conference")
{
    var conferences = _context.Standings
        .Where(s => s.Season.Year == season)
        .Select(s => s.Conference.Name)
        .Distinct();

    foreach (var conference in conferences)
    {
        <h3>@conference</h3>

        var teams = Model
            .Where(s => s.Conference.Name == conference);

        <table class="table standings">
            <thead>
                <tr>
                    @if (season < 2024)
                    {
                        <th>
                            #
                        </th>
                        <th colspan="2">
                            @Html.DisplayNameFor(model => model.Team)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.GamesPlayed)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.Wins)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.Losses)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.OTLosses)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.GoalsFor)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.GoalsAgainst)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.GoalDifferential)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.Points)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.PointsPct)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Streak)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.RegulationWins)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.RegPlusOTWins)
                        </th>
                        <th class="record-column">
                            @Html.DisplayNameFor(model => model.RecordVsDivision_2021Format)
                        </th>
                        @if (ViewBag.Season > 2021)
                        {
                            <th class="record-column">
                                @Html.DisplayNameFor(model => model.RecordVsConference_2021Format)
                            </th>
                        }
                        <th class="record-column">
                            @Html.DisplayNameFor(model => model.InterConfRecord_2021Format)
                        </th>
                    }
                    else
                    {
                        <th>
                            #
                        </th>
                        <th colspan="2">
                            @Html.DisplayNameFor(model => model.Team)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.GamesPlayed)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.Wins)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.Losses)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.WinPct)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.DivisionGamesBehind)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.GoalsFor)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.GoalsAgainst)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.GoalDifferential)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Streak)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.RegulationWins)
                        </th>
                        <th class="fixed-column">
                            @Html.DisplayNameFor(model => model.RegPlusOTWins)
                        </th>
                        <th class="record-column">
                            @Html.DisplayNameFor(model => model.RecordVsConference_2024Format)
                        </th>
                        <th class="record-column">
                            @Html.DisplayNameFor(model => model.RecordVsDivision_2024Format)
                        </th>
                        <th class="record-column">
                            @Html.DisplayNameFor(model => model.InterConfRecord_2024Format)
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @{
                    int rank = 1;

                    foreach (var item in teams)
                    {
                        <tr>
                            @if (item.Season.Year < 2024)
                            {
                                <th>
                                    @rank
                                </th>
                                <td class="team-logo">
                                    <img src="~/@item.Team.LogoPath" width="25" height="25" />
                                </td>
                                <td class="team-name">
                                    @item.Team.FullName
                                    @if (item.PlayoffStatus != "")
                                    {
                                        <span class="badge @GetBadgeClass(season, item.PlayoffStatus!)" title="@GetPlayoffStatusDescription(item.PlayoffStatus!)">@item.PlayoffStatus</span>
                                    }
                                </td>
                                <td class="text-secondary">
                                    @Html.DisplayFor(modelItem => item.GamesPlayed)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Wins)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Losses)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.OTLosses)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.GoalsFor)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.GoalsAgainst)
                                </td>
                                <td class="@GetColor(item.GoalDifferential)">
                                    @GetGoalDifferentialString(item.GoalDifferential)
                                </td>
                                <th>
                                    @Html.DisplayFor(modelItem => item.Points)
                                </th>
                                <td>
                                    @string.Format("{0:F1}", item.PointsPct)
                                </td>
                                <td class="@GetColor(item.Streak)">
                                    @GetStreak(item)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.RegulationWins)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.RegPlusOTWins)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.RecordVsDivision_2021Format)
                                </td>
                                @if (ViewBag.Season > 2021)
                                {
                                    <td>
                                        @Html.DisplayFor(modelItem => item.RecordVsConference_2021Format)
                                    </td>
                                }
                                <td>
                                    @Html.DisplayFor(modelItem => item.InterConfRecord_2021Format)
                                </td>
                            }
                            else
                            {
                                <th>
                                    @rank
                                </th>
                                <td class="team-logo">
                                    <img src="~/@item.Team.LogoPath" width="25" height="25" />
                                </td>
                                <td class="team-name">
                                    @item.Team.FullName
                                    @if (item.PlayoffStatus != "")
                                    {
                                        <span class="badge @GetBadgeClass(season, item.PlayoffStatus!)" title="@GetPlayoffStatusDescription(item.PlayoffStatus!)">@item.PlayoffStatus</span>
                                    }
                                </td>
                                <td class="text-secondary">
                                    @Html.DisplayFor(modelItem => item.GamesPlayed)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Wins)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Losses)
                                </td>
                                <th>
                                    @string.Format("{0:F1}", item.WinPct)
                                </th>
                                <td>
                                    @(item.ConferenceGamesBehind > 0 ? 
                                        string.Format("{0:F1}", item.ConferenceGamesBehind) : 
                                        "--")
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.GoalsFor)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.GoalsAgainst)
                                </td>
                                <td class="@GetColor(item.GoalDifferential)">
                                    @GetGoalDifferentialString(item.GoalDifferential)
                                </td>
                                <td class="@GetColor(item.Streak)">
                                    @GetStreak(item)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.RegulationWins)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.RegPlusOTWins)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.RecordVsConference_2024Format)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.RecordVsDivision_2024Format)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.InterConfRecord_2024Format)
                                </td>
                            }
                        </tr>

                        rank++;
                    }

                    _context.SaveChanges();
                }
            </tbody>
        </table>
    }
}
else
{
    <table class="table standings">
        <thead>
            <tr>
                @if (season < 2024)
                {
                    <th>
                        #
                    </th>
                    <th colspan="2">
                        @Html.DisplayNameFor(model => model.Team)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.GamesPlayed)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.Wins)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.Losses)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.OTLosses)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.GoalsFor)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.GoalsAgainst)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.GoalDifferential)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.Points)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.PointsPct)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Streak)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.RegulationWins)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.RegPlusOTWins)
                    </th>
                    <th class="record-column">
                        @Html.DisplayNameFor(model => model.RecordVsDivision_2021Format)
                    </th>
                    <th class="record-column">
                        @Html.DisplayNameFor(model => model.RecordVsConference_2021Format)
                    </th>
                    <th class="record-column">
                        @Html.DisplayNameFor(model => model.InterConfRecord_2021Format)
                    </th>
                }
                else
                {
                    <th>
                        #
                    </th>
                    <th colspan="2">
                        @Html.DisplayNameFor(model => model.Team)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.GamesPlayed)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.Wins)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.Losses)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.WinPct)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.DivisionGamesBehind)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.GoalsFor)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.GoalsAgainst)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.GoalDifferential)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Streak)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.RegulationWins)
                    </th>
                    <th class="fixed-column">
                        @Html.DisplayNameFor(model => model.RegPlusOTWins)
                    </th>
                    <th class="record-column">
                        @Html.DisplayNameFor(model => model.InterConfRecord_2024Format)
                    </th>
                    <th class="record-column">
                        @Html.DisplayNameFor(model => model.RecordVsConference_2024Format)
                    </th>
                    <th class="record-column">
                        @Html.DisplayNameFor(model => model.RecordVsDivision_2024Format)
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @{
                int rank = 1;

                foreach (var item in Model)
                {
                    <tr>
                        @if (item.Season.Year < 2024)
                        {
                            <th>
                                @rank
                            </th>
                            <td class="team-logo">
                                <img src="~/@item.Team.LogoPath" width="25" height="25" />
                            </td>
                            <td class="team-name">
                                @item.Team.FullName
                                @if (item.PlayoffStatus != "")
                                {
                                    <span class="badge @GetBadgeClass(season, item.PlayoffStatus!)" title="@GetPlayoffStatusDescription(item.PlayoffStatus!)">@item.PlayoffStatus</span>
                                }
                            </td>
                            <td class="text-secondary">
                                @Html.DisplayFor(modelItem => item.GamesPlayed)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Wins)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Losses)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.OTLosses)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.GoalsFor)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.GoalsAgainst)
                            </td>
                            <td class="@GetColor(item.GoalDifferential)">
                                @GetGoalDifferentialString(item.GoalDifferential)
                            </td>
                            <th>
                                @Html.DisplayFor(modelItem => item.Points)
                            </th>
                            <td>
                                @string.Format("{0:F1}", item.PointsPct)
                            </td>
                            <td class="@GetColor(item.Streak)">
                                @GetStreak(item)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.RegulationWins)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.RegPlusOTWins)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.RecordVsDivision_2021Format)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.RecordVsConference_2021Format)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.InterConfRecord_2021Format)
                            </td>
                        }
                        else
                        {
                            <th>
                                @rank
                            </th>
                            <td class="team-logo">
                                <img src="~/@item.Team.LogoPath" width="25" height="25" />
                            </td>
                            <td class="team-name">
                                @item.Team.FullName
                                @if (item.PlayoffStatus != "")
                                {
                                    <span class="badge @GetBadgeClass(season, item.PlayoffStatus!)" title="@GetPlayoffStatusDescription(item.PlayoffStatus!)">@item.PlayoffStatus</span>
                                }
                            </td>
                            <td class="text-secondary">
                                @Html.DisplayFor(modelItem => item.GamesPlayed)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Wins)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Losses)
                            </td>
                            <th>
                                @string.Format("{0:F1}", item.WinPct)
                            </th>
                            <td>
                                @(item.LeagueGamesBehind > 0 ? 
                                    string.Format("{0:F1}", item.LeagueGamesBehind) : 
                                    "--")
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.GoalsFor)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.GoalsAgainst)
                            </td>
                            <td class="@GetColor(item.GoalDifferential)">
                                @GetGoalDifferentialString(item.GoalDifferential)
                            </td>
                            <td class="@GetColor(item.Streak)">
                                @GetStreak(item)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.RegulationWins)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.RegPlusOTWins)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.InterConfRecord_2024Format)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.RecordVsConference_2024Format)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.RecordVsDivision_2024Format)
                            </td>
                        }
                    </tr>

                    rank++;
                }

                _context.SaveChanges();
            }
        </tbody>
    </table>
}

<div class="accordion accordion-flush" id="standings-accordion">
    <div class="accordion-item">
        <h2 class="accordion-header" id="legend-header">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#legend-collapse" aria-expanded="false" aria-controls="legend-collapse">Legend</button>
        </h2>
        <div class="accordion-collapse collapse" id="legend-collapse" aria-labelledby="legend-header" data-bs-parent="#standings-accordion">
            <div class="accordion-body container">
                <div class="row">
                    <div class="col">
                        <ul>
                            <li><strong>GP:</strong> Games Played</li>
                            <li><strong>W:</strong> Wins</li>
                            <li><strong>L:</strong> Losses</li>
                            <li><strong>Win %:</strong> Win Percentage</li>
                            <li><strong>GB:</strong> Games Behind</li>
                            <li><strong>GF:</strong> Goals For</li>
                            <li><strong>GA:</strong> Goals Against</li>
                            <li><strong>GD:</strong> Goal Differential</li>
                        </ul>
                    </div>
                    <div class="col">
                        <ul>
                            <li><strong>Streak:</strong> Current winning/losing streak</li>
                            <li><strong>RW:</strong> Regulation Wins</li>
                            <li><strong>ROW:</strong> Regulation + Overtime Wins</li>
                            <li><strong>vs. Div.:</strong> W-L Record vs. Division</li>
                            <li><strong>vs. Conf.:</strong> W-L Record vs. Conference</li>
                            <li><strong>East/West:</strong> W-L Record vs. Opposite Conference</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="tiebreakers-header">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#tiebreakers-collapse" aria-expanded="false" aria-controls="tiebreakers-collapse">Tiebreakers</button>
        </h2>
        <div class="accordion-collapse collapse" id="tiebreakers-collapse" aria-labelledby="tiebreakers-header" data-bs-parent="#standings-accordion">
            <div class="accordion-body">
                <p>
                    In the standings, teams are sorted by win percentage, and then W-L record. If at any point two or more teams have the same W-L record, ties shall be broken as follows:

                    <ol id="tiebreakers">
                        <li>
                            Greater amount of head-to-head (H2H) wins.
                        </li>
                        <li>
                            Greater sum of goals scored in all H2H games played this season ("H2H aggregate").
                        </li>
                        <li>
                            Greater sum of goals scored in H2H wins only. For example, if Team A and Team B played each other 4 times, and Team A won two of the games 5-3 and 3-2, respectively, while Team B won two of the games 4-2 and 2-1, respectively, Team A gets the tiebreaker because they scored a total of 8 goals in the games they won against Team B, compared to the total of 6 goals that Team B scored in the games they won against Team A.
                        </li>
                        <li>
                            Greater amount of wins in regulation only.
                        </li>
                        <li>
                            Greater amount of wins in regulation or overtime, excluding the shootout.
                        </li>
                        <li>
                            Better W-L record against certain groups of teams, the order of which will be determined by where the tie is being broken.<br /><br />
                            For ties between teams from the <strong>same division</strong>:
                            <ol class="group-record-tiebreakers">
                                <li>
                                    W-L record vs. division opponents.
                                </li>
                                <li>
                                    W-L record vs. conference opponents outside of division.
                                </li>
                                <li>
                                    W-L record vs. teams from the other conference.
                                </li>
                            </ol>
                            <br />
                            For ties between teams from the <strong>same conference</strong>, but <strong>different divisions</strong>:
                            <ol class="group-record-tiebreakers">
                                <li>
                                    W-L record vs. conference opponents outside of own division.
                                </li>
                                <li>
                                    W-L record vs. respective division opponents of the tied teams.
                                </li>
                                <li>
                                    W-L record vs. teams from the other conference.
                                </li>
                            </ol>
                            <br />
                            For ties between teams from <strong>different conferences</strong>:
                            <ol class="group-record-tiebreakers">
                                <li>
                                    W-L record vs. teams from the other conference.
                                </li>
                                <li>
                                    W-L record vs. respective conference opponents outside of the respective divisions of the tied teams.
                                </li>
                                <li>
                                    W-L record vs. respective division opponents of the tied teams.
                                </li>
                            </ol>
                            <br />
                        </li>
                        <li>
                            Greater difference between goals for and goals against ("goal differential").
                        </li>
                        <li>
                            Greater amount of goals for.
                        </li>
                        <li>
                            Whichever team has won more consecutive games, or lost fewer consecutive games, at the current time.
                        </li>
                        <li>
                            Whichever team has the better goal differential on their current streak.
                        </li>
                        <li>
                            Whichever team has scored more goals on their current streak.
                        </li>
                    </ol>
                </p>
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="playoff-format-header">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#playoff-format-collapse" aria-expanded="false" aria-controls="playoff-format-collapse">Playoff Format</button>
        </h2>
        <div class="accordion-collapse collapse" id="playoff-format-collapse" aria-labelledby="playoff-format-header" data-bs-parent="#standings-accordion">
            <div class="accordion-body">
                <h4>Assigning Seeds</h4>
                <p>
                    16 teams will qualify for the Sycamore Cup Playoffs, 8 teams per conference. Seeds in each conference will be assigned as described below:
                    <ul>
                        <li><strong>#1 seed:</strong> Best division leader</li>
                        <li><strong>#2 seed:</strong> Second-best division leader</li>
                        <li><strong>#3 seed:</strong> Third-best division leader</li>
                        <li><strong>#4-#8 seeds:</strong> Best 5 remaining teams</li>
                    </ul>
                </p>
                <h4>Conference Quarterfinal Matchups</h4>
                <ul>
                    <li>#1 seed vs. #8 seed</li>
                    <li>#4 seed vs. #5 seed</li>
                </ul>
                <ul>
                    <li>#2 seed vs. #7 seed</li>
                    <li>#3 seed vs. #6 seed</li>
                </ul>
                <p>
                    The bracket is fixed, meaning that teams are not reseeded after the Conference Quarterfinals.
                </p>
                <p>
                    At the end of the Conference Quarterfinals, the winner of the #1 vs. #8 matchup will play against the winner of the #4 vs. #5 matchup, and the winner of the #2 vs. #7 matchup will play against the winner of the #3 vs. #6 matchup.
                </p>
            </div>
        </div>
    </div>
</div>