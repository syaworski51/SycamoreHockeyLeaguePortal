@model List<Standings>
@inject SycamoreHockeyLeaguePortal.Data.ApplicationDbContext _context

@{
    IEnumerable<Standings> teams = ViewBag.Teams;
    int season = ViewBag.Season;
    string viewBy = ViewBag.ViewBy;

    string GetName(Team team)
    {
        var teamsInSameCity = _context.Teams
            .Where(t => t.City == team.City);

        if (teamsInSameCity.Count() > 1)
            return team.AlternateName!;

        return team.City;
    }

    string GetStreak(Standings teamStats)
    {
        if (teamStats.Streak != 0)
        {
            string type = (teamStats.Streak > 0) ? "W" : "L";
            int duration = Math.Abs(teamStats.Streak);
            return $"{type} {duration}";
        }

        return "--";
    }

    string GetColor(int value)
    {
        if (value > 0)
            return "text-success";

        if (value < 0)
            return "text-danger";

        return "text-dark";
    }

    string IsRowPlayoffCutoff(int rank)
    {
        int cutoff = viewBy == "playoffs" ? 8 : 4;

        if ((season <= 2022 && viewBy == "division") ||
            (season >= 2023 && viewBy == "playoffs"))
            return (rank == cutoff) ?
                "playoff-cutoff" :
                "standings-record";

        return "standings-record";
    }

    string GetGoalDifferentialString(int gd)
    {
        if (gd > 0)
            return $"+{gd}";

        return gd.ToString();
    }

    List<List<Standings>> GetStandingsByDivision(string conference)
    {
        List<List<Standings>> standings = new List<List<Standings>>();

        var divisions = _context.Alignments
            .Where(s => s.Season.Year == season &&
                        s.Conference.Code == conference)
            .Select(d => d.Division)
            .Distinct();

        foreach (var division in divisions)
        {
            standings.Add(new List<Standings>());

            var teams = Model
                .Where(s => s.DivisionId == division.Id);

            foreach (var team in teams)
                standings.Last().Add(team);
        }

        return standings;
    }

    List<Standings> GetTeamsAtPosition(string conference, int highestPosition, int? lowestPosition = null)
    {
        List<Standings> teams = new List<Standings>();

        var divisions = _context.Alignments
            .Where(s => s.Season.Year == season &&
                        s.Conference.Code == conference)
            .Select(s => s.Division)
            .Distinct();

        if (lowestPosition != null)
        {
            for (int position = highestPosition; position <= lowestPosition; position++)
            {
                foreach (var division in divisions)
                {
                    var divisionStandings = Model
                        .Where(s => s.DivisionId == division.Id)
                        .ToList();

                    teams.Add(divisionStandings[position - 1]);
                }
            }
        }
        else
        {
            foreach (var division in divisions)
            {
                var divisionStandings = Model
                    .Where(s => s.DivisionId == division.Id)
                    .ToList();

                teams.Add(divisionStandings[highestPosition - 1]);
            }
        }



        return teams;
    }

    List<Standings> GetLeaders(string conference)
    {
        return GetTeamsAtPosition(conference, 1);
    }

    List<Standings> Get2ndPlaceTeams(string conference)
    {
        return GetTeamsAtPosition(conference, 2);
    }

    List<Standings> GetWildCards(string conference)
    {
        return GetTeamsAtPosition(conference, 3, 4);
    }

    string GetBadgeClass(int season, string playoffStatus)
    {
        string clinchedPresidentsTrophy = "bg-warning text-dark";
        string clinchedConference = "bg-success";
        string clinchedDivision = "bg-success";
        string clinchedHomeIceAdvantage = "bg-primary";
        string clinched2021PlayoffSpot = "bg-primary";
        string clinchedPlayoffSpot = "bg-secondary";
        string eliminated = "bg-danger";

        if (season == 2021)
        {
            switch (playoffStatus)
            {
                case "z":
                    return clinchedPresidentsTrophy;

                case "y":
                    return clinchedDivision;

                case "e":
                    return eliminated;

                default:
                    return clinched2021PlayoffSpot;
            }
        }
        else
        {
            switch (playoffStatus)
            {
                case "P":
                    return clinchedPresidentsTrophy;

                case "Z":
                    return clinchedConference;

                case "Y":
                    return clinchedDivision;

                case "X":
                    return clinchedHomeIceAdvantage;

                case "e":
                    return eliminated;

                default:
                    return clinchedPlayoffSpot;
            }
        }
    }

    string GetPlayoffStatusDescription(string symbol)
    {
        var description = _context.PlayoffStatuses
            .Where(ps => ps.Symbol == symbol &&
                         season >= ps.ActiveFrom &&
                         (season <= ps.ActiveTo || ps.ActiveTo == null))
            .Select(ps => ps.Description)
            .FirstOrDefault()!;

        return description;
    }

    string GetGamesBehindString(decimal gamesBehind)
    {
        if (gamesBehind < 0)
        {
            gamesBehind = Math.Abs(gamesBehind);
            return $"+{gamesBehind}";
        }

        if (gamesBehind == 0)
            return "--";


        return gamesBehind.ToString();
    }

    string GetNextGameString(Standings team)
    {
        Schedule game = team.NextGame!;

        if (game != null) 
        {
            bool isHomeOrAway = game.HomeTeam == team.Team;
            string date = $"{game.Date.Month.ToString()}/{game.Date.Day.ToString()}";
            string homeOrAway = isHomeOrAway ? "vs." : "@";
            string opponent = isHomeOrAway ? game.AwayTeam.Code : game.HomeTeam.Code;

            return $"Next Game: {date} {homeOrAway} {opponent}";
        }

        return "";
    }
}

<table class="table standings">
    <thead>
        <tr>
            <th title="Ranking">
                #
            </th>
            <th colspan="2" title="Team">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.Team)
            </th>
            <th class="fixed-column" title="Games Played">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.GamesPlayed)
            </th>
            <th class="fixed-column" title="Wins">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.Wins)
            </th>
            <th class="fixed-column" title="Losses">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.Losses)
            </th>
            <th title="Win Percentage">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.WinPct)
            </th>
            <th class="fixed-column" title="Games Behind">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.DivisionGamesBehind)
            </th>
            <th class="fixed-column" title="Goals For">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.GoalsFor)
            </th>
            <th class="fixed-column" title="Goals Against">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.GoalsAgainst)
            </th>
            <th class="fixed-column" title="Goal Differential">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.GoalDifferential)
            </th>
            <th title="Streak">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.Streak)
            </th>
            <th class="fixed-column" title="Regulation Wins">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.RegulationWins)
            </th>
            <th class="fixed-column" title="Regulation + Overtime Wins">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.RegPlusOTWins)
            </th>
            <th class="record-column" title="Last 5 Games">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.RecordInLast10Games)
            </th>
            <th class="record-column" title="Record vs. division opponents">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.RecordVsDivision_2024Format)
            </th>
            <th class="record-column" title="Record vs. conference opponents outside of division">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.RecordVsConference_2024Format)
            </th>
            <th class="record-column" title="Record vs. other conference">
                @Html.DisplayNameFor(model => model.FirstOrDefault()!.InterConfRecord_2024Format)
            </th>
        </tr>
    </thead>
    <tbody>
        @{
            int rank = ViewBag.Rank ?? 1;

            foreach (var team in teams)
            {
                <tr class="@IsRowPlayoffCutoff(rank)">
                    <th>
                        <a class="change-playoff-status" asp-action="PlayoffStatus" asp-route-season="@team.Season.Year" asp-route-team="@team.Team.Code" asp-route-currentStatus="@team.PlayoffStatus" asp-route-viewBy="@ViewBag.ViewBy">@rank</a>
                    </th>
                    <td class="team-logo">
                        <img src="~/@team.Team.LogoPath" width="25" height="25" />
                    </td>
                    @if (team.NextGame != null)
                    {
                        <td class="team-name" title="@GetNextGameString(team)">
                            <a class="team-link" asp-controller="Teams" asp-action="Details" asp-route-id="@team.Team.Code" asp-route-season="@season" asp-route-gameType="regular-season">@team.Team</a>
                            @if (team.PlayoffStatus != "")
                            {
                                <span class="badge @GetBadgeClass(season, team.PlayoffStatus!)" title="@GetPlayoffStatusDescription(team.PlayoffStatus!)">@team.PlayoffStatus</span>
                            }
                        </td>
                    }
                    else
                    {
                        <td class="team-name">
                            <a class="team-link" asp-controller="Teams" asp-action="Details" asp-route-id="@team.Team.Code" asp-route-season="@season" asp-route-gameType="regular-season">@team.Team</a>
                            @if (team.PlayoffStatus != "")
                            {
                                <span class="badge @GetBadgeClass(season, team.PlayoffStatus!)" title="@GetPlayoffStatusDescription(team.PlayoffStatus!)">@team.PlayoffStatus</span>
                            }
                        </td>
                    }
                    <td class="text-secondary">
                        @Html.DisplayFor(modelItem => team.GamesPlayed)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => team.Wins)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => team.Losses)
                    </td>
                    <th>
                        @string.Format("{0:F1}", team.WinPct)
                    </th>
                    <td>
                        @if (viewBy == "division")
                        {
                            @GetGamesBehindString(team.DivisionGamesBehind)
                        }
                        else if (viewBy == "conference" || viewBy == "playoffs")
                        {
                            @GetGamesBehindString(team.ConferenceGamesBehind)
                        }
                        else
                        {
                            @GetGamesBehindString(team.LeagueGamesBehind)
                        }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => team.GoalsFor)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => team.GoalsAgainst)
                    </td>
                    <td class="@GetColor(team.GoalDifferential)">
                        @GetGoalDifferentialString(team.GoalDifferential)
                    </td>
                    <td class="@GetColor(team.Streak)">
                        @GetStreak(team)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => team.RegulationWins)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => team.RegPlusOTWins)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => team.RecordInLast10Games)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => team.RecordVsDivision_2024Format)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => team.RecordVsConference_2024Format)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => team.InterConfRecord_2024Format)
                    </td>
                </tr>

                rank++;
            }

            _context.SaveChanges();
        }
    </tbody>
</table>