@model Team

@{
    Guid teamId = Model.Id;
    IEnumerable<Schedule> schedule = ViewBag.Schedule;

    string GetDayOfWeek(DateTime date)
    {
        return date.ToString("dddd");
    }

    string GetMonth(DateTime date)
    {
        return date.ToString("MMMM");
    }

    string GetDateString(DateTime date)
    {
        return $"{GetDayOfWeek(date)}, {GetMonth(date)} {date.Day}";
    }

    string GetOpponent(Schedule game)
    {
        if (game.AwayTeamId == teamId)
            return $"@ {game.HomeTeam}";

        return game.AwayTeam.ToString();
    }

    string GetOpponentLogoPath(Schedule game)
    {
        if (game.AwayTeamId == teamId)
            return game.HomeTeam.LogoPath!;

        return game.AwayTeam.LogoPath!;
    }

    string GetOpponentCode(Schedule game)
    {
        if (game.AwayTeamId == teamId)
            return game.HomeTeam.Code;

        return game.AwayTeam.Code;
    }

    string GetResult(Schedule game)
    {
        if (game.IsFinalized)
        {
            if (game.HomeTeamId == teamId)
                return (game.HomeScore > game.AwayScore) ? "W" : "L";
            else
                return (game.AwayScore > game.HomeScore) ? "W" : "L";
        }

        return game.ShortStatus;
    }

    string GetResultColor(Schedule game, string? result = null)
    {
        result ??= GetResult(game);

        switch (result)
        {
            case "W":
                return "win";

            case "L":
                return "loss";

            default:
                return "text-black";
        }
    }

    string GetScoreString(Schedule game)
    {
        string scoreString = "";

        if (game.Period > 0)
        {
            scoreString = (game.HomeTeam == Model) ?
                $"{game.HomeScore} - {game.AwayScore}" :
                $"{game.AwayScore} - {game.HomeScore}";

            if (game.IsFinalized && game.Period > 3)
            {
                if (game.Period == 4)
                    scoreString += " (OT)";
                else
                    scoreString += (game.Type == "Regular Season") ? " (SO)" : $" ({game.Period - 3}OT)";
            }
        }

        return scoreString;
    }
}

<table class="table team-schedule">
    <thead>
        <tr>
            <th>
                Date
            </th>
            <th colspan="2">
                Opponent
            </th>
            <th colspan="2">
                Result
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var game in schedule)
        {
            var isAwayGame = game.AwayTeamId == teamId ? "away-game" : "";

            <tr class="@isAwayGame">
                <td>
                    <a class="muted-link" asp-controller="Schedule" asp-action="GameCenter" asp-route-date="@game.Date.ToShortDateString()" asp-route-awayTeam="@game.AwayTeam.Code" asp-route-homeTeam="@game.HomeTeam.Code">@GetDateString(game.Date)</a>
                </td>
                <td class="opponent-name">
                    <a class="muted-link" asp-controller="Schedule" asp-action="GameCenter" asp-route-date="@game.Date.ToShortDateString()" asp-route-awayTeam="@game.AwayTeam.Code" asp-route-homeTeam="@game.HomeTeam.Code">@GetOpponent(game)</a>
                </td>
                <td class="opponent-logo">
                    <img class="schedule-team-logo" src="~/@GetOpponentLogoPath(game)" />
                </td>
                <td class="@GetResultColor(game) result">
                    @GetResult(game)
                </td>
                <td class="score">
                    @GetScoreString(game)
                </td>
            </tr>
        }
    </tbody>
</table>