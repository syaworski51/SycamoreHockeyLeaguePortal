// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SHLAPI.Data;

#nullable disable

namespace SHLAPI.Migrations
{
    [DbContext(typeof(SHLPortalDbContext))]
    partial class SHLPortalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SHLAPI.Models.Alignment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ConferenceId" }, "IX_Alignments_ConferenceId");

                    b.HasIndex(new[] { "DivisionId" }, "IX_Alignments_DivisionId");

                    b.HasIndex(new[] { "SeasonId" }, "IX_Alignments_SeasonId");

                    b.HasIndex(new[] { "TeamId" }, "IX_Alignments_TeamId");

                    b.ToTable("Alignments");
                });

            modelBuilder.Entity("SHLAPI.Models.Champion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SeasonId" }, "IX_Champions_SeasonId");

                    b.HasIndex(new[] { "TeamId" }, "IX_Champions_TeamId");

                    b.ToTable("Champions");
                });

            modelBuilder.Entity("SHLAPI.Models.ChampionsRound", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BestOf")
                        .HasColumnType("int");

                    b.Property<Guid>("ChampionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OpponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoundIndex")
                        .HasColumnType("int");

                    b.Property<int>("SeriesLength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ChampionId" }, "IX_ChampionsRounds_ChampionId");

                    b.HasIndex(new[] { "OpponentId" }, "IX_ChampionsRounds_OpponentId");

                    b.ToTable("ChampionsRounds");
                });

            modelBuilder.Entity("SHLAPI.Models.Conference", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("SHLAPI.Models.Division", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("SHLAPI.Models.GameType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterValue")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.HasKey("Id");

                    b.ToTable("GameTypes");
                });

            modelBuilder.Entity("SHLAPI.Models.PlayoffRound", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SeasonId" }, "IX_PlayoffRounds_SeasonId");

                    b.ToTable("PlayoffRounds");
                });

            modelBuilder.Entity("SHLAPI.Models.PlayoffSeries", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Team1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Team1Wins")
                        .HasColumnType("int");

                    b.Property<Guid>("Team2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Team2Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoundId" }, "IX_PlayoffSeries_RoundId");

                    b.HasIndex(new[] { "SeasonId" }, "IX_PlayoffSeries_SeasonId");

                    b.HasIndex(new[] { "Team1Id" }, "IX_PlayoffSeries_Team1Id");

                    b.HasIndex(new[] { "Team2Id" }, "IX_PlayoffSeries_Team2Id");

                    b.ToTable("PlayoffSeries");
                });

            modelBuilder.Entity("SHLAPI.Models.PlayoffStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActiveFrom")
                        .HasColumnType("int");

                    b.Property<int?>("ActiveTo")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlayoffStatuses");
                });

            modelBuilder.Entity("SHLAPI.Models.ProgramFlag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ProgramFlags");
                });

            modelBuilder.Entity("SHLAPI.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AwayScore")
                        .HasColumnType("int");

                    b.Property<Guid>("AwayTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameIndex")
                        .HasColumnType("int");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("int");

                    b.Property<Guid>("HomeTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsFinalized")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<Guid?>("PlayoffRoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AwayTeamId" }, "IX_Schedule_AwayTeamId");

                    b.HasIndex(new[] { "HomeTeamId" }, "IX_Schedule_HomeTeamId");

                    b.HasIndex(new[] { "PlayoffRoundId" }, "IX_Schedule_PlayoffRoundId");

                    b.HasIndex(new[] { "SeasonId" }, "IX_Schedule_SeasonId");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("SHLAPI.Models.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GamesPerTeam")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("SHLAPI.Models.Standings", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ConferenceGamesBehind")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<Guid?>("ConferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DivisionGamesBehind")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<Guid?>("DivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("GamesPlayedInLast5Games")
                        .HasColumnType("int");

                    b.Property<int>("GamesPlayedVsConference")
                        .HasColumnType("int");

                    b.Property<int>("GamesPlayedVsDivision")
                        .HasColumnType("int");

                    b.Property<int>("GoalDifferential")
                        .HasColumnType("int");

                    b.Property<int>("GoalsAgainst")
                        .HasColumnType("int");

                    b.Property<int>("GoalsFor")
                        .HasColumnType("int");

                    b.Property<int>("InterConfGamesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("InterConfLosses")
                        .HasColumnType("int");

                    b.Property<int>("InterConfOtlosses")
                        .HasColumnType("int")
                        .HasColumnName("InterConfOTLosses");

                    b.Property<decimal>("InterConfWinPct")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<int>("InterConfWins")
                        .HasColumnType("int");

                    b.Property<decimal>("LeagueGamesBehind")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("LossesInLast5Games")
                        .HasColumnType("int");

                    b.Property<int>("LossesVsConference")
                        .HasColumnType("int");

                    b.Property<int>("LossesVsDivision")
                        .HasColumnType("int");

                    b.Property<int>("MaximumPossiblePoints")
                        .HasColumnType("int");

                    b.Property<int>("Otlosses")
                        .HasColumnType("int")
                        .HasColumnName("OTLosses");

                    b.Property<int>("OtlossesVsConference")
                        .HasColumnType("int")
                        .HasColumnName("OTLossesVsConference");

                    b.Property<int>("OtlossesVsDivision")
                        .HasColumnType("int")
                        .HasColumnName("OTLossesVsDivision");

                    b.Property<string>("PlayoffStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<decimal>("PointsPct")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<int>("RegPlusOtwins")
                        .HasColumnType("int")
                        .HasColumnName("RegPlusOTWins");

                    b.Property<int>("RegulationWins")
                        .HasColumnType("int");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Streak")
                        .HasColumnType("int");

                    b.Property<int>("StreakGoalDifferential")
                        .HasColumnType("int");

                    b.Property<int>("StreakGoalsAgainst")
                        .HasColumnType("int");

                    b.Property<int>("StreakGoalsFor")
                        .HasColumnType("int");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("WinPct")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<decimal>("WinPctInLast5Games")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<decimal>("WinPctVsConference")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<decimal>("WinPctVsDivision")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.Property<int>("WinsInLast5Games")
                        .HasColumnType("int");

                    b.Property<int>("WinsVsConference")
                        .HasColumnType("int");

                    b.Property<int>("WinsVsDivision")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ConferenceId" }, "IX_Standings_ConferenceId");

                    b.HasIndex(new[] { "DivisionId" }, "IX_Standings_DivisionId");

                    b.HasIndex(new[] { "SeasonId" }, "IX_Standings_SeasonId");

                    b.HasIndex(new[] { "TeamId" }, "IX_Standings_TeamId");

                    b.ToTable("Standings");
                });

            modelBuilder.Entity("SHLAPI.Models.StandingsSortOption", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FirstYear")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int?>("LastYear")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StandingsSortOptions");
                });

            modelBuilder.Entity("SHLAPI.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlternateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryColor")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TertiaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SHLAPI.Models.Alignment", b =>
                {
                    b.HasOne("SHLAPI.Models.Conference", "Conference")
                        .WithMany("Alignments")
                        .HasForeignKey("ConferenceId");

                    b.HasOne("SHLAPI.Models.Division", "Division")
                        .WithMany("Alignments")
                        .HasForeignKey("DivisionId");

                    b.HasOne("SHLAPI.Models.Season", "Season")
                        .WithMany("Alignments")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHLAPI.Models.Team", "Team")
                        .WithMany("Alignments")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conference");

                    b.Navigation("Division");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SHLAPI.Models.Champion", b =>
                {
                    b.HasOne("SHLAPI.Models.Season", "Season")
                        .WithMany("Champions")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHLAPI.Models.Team", "Team")
                        .WithMany("Champions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SHLAPI.Models.ChampionsRound", b =>
                {
                    b.HasOne("SHLAPI.Models.Champion", "Champion")
                        .WithMany("ChampionsRounds")
                        .HasForeignKey("ChampionId")
                        .IsRequired();

                    b.HasOne("SHLAPI.Models.Team", "Opponent")
                        .WithMany("ChampionsRounds")
                        .HasForeignKey("OpponentId")
                        .IsRequired();

                    b.Navigation("Champion");

                    b.Navigation("Opponent");
                });

            modelBuilder.Entity("SHLAPI.Models.PlayoffRound", b =>
                {
                    b.HasOne("SHLAPI.Models.Season", "Season")
                        .WithMany("PlayoffRounds")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SHLAPI.Models.PlayoffSeries", b =>
                {
                    b.HasOne("SHLAPI.Models.PlayoffRound", "Round")
                        .WithMany("PlayoffSeries")
                        .HasForeignKey("RoundId")
                        .IsRequired();

                    b.HasOne("SHLAPI.Models.Season", "Season")
                        .WithMany("PlayoffSeries")
                        .HasForeignKey("SeasonId")
                        .IsRequired();

                    b.HasOne("SHLAPI.Models.Team", "Team1")
                        .WithMany("PlayoffSeriesTeam1s")
                        .HasForeignKey("Team1Id")
                        .IsRequired();

                    b.HasOne("SHLAPI.Models.Team", "Team2")
                        .WithMany("PlayoffSeriesTeam2s")
                        .HasForeignKey("Team2Id")
                        .IsRequired();

                    b.Navigation("Round");

                    b.Navigation("Season");

                    b.Navigation("Team1");

                    b.Navigation("Team2");
                });

            modelBuilder.Entity("SHLAPI.Models.Schedule", b =>
                {
                    b.HasOne("SHLAPI.Models.Team", "AwayTeam")
                        .WithMany("ScheduleAwayTeams")
                        .HasForeignKey("AwayTeamId")
                        .IsRequired();

                    b.HasOne("SHLAPI.Models.Team", "HomeTeam")
                        .WithMany("ScheduleHomeTeams")
                        .HasForeignKey("HomeTeamId")
                        .IsRequired();

                    b.HasOne("SHLAPI.Models.PlayoffRound", "PlayoffRound")
                        .WithMany("Schedules")
                        .HasForeignKey("PlayoffRoundId");

                    b.HasOne("SHLAPI.Models.Season", "Season")
                        .WithMany("Schedules")
                        .HasForeignKey("SeasonId")
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("PlayoffRound");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SHLAPI.Models.Standings", b =>
                {
                    b.HasOne("SHLAPI.Models.Conference", "Conference")
                        .WithMany("Standings")
                        .HasForeignKey("ConferenceId");

                    b.HasOne("SHLAPI.Models.Division", "Division")
                        .WithMany("Standings")
                        .HasForeignKey("DivisionId");

                    b.HasOne("SHLAPI.Models.Season", "Season")
                        .WithMany("Standings")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHLAPI.Models.Team", "Team")
                        .WithMany("Standings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conference");

                    b.Navigation("Division");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SHLAPI.Models.Champion", b =>
                {
                    b.Navigation("ChampionsRounds");
                });

            modelBuilder.Entity("SHLAPI.Models.Conference", b =>
                {
                    b.Navigation("Alignments");

                    b.Navigation("Standings");
                });

            modelBuilder.Entity("SHLAPI.Models.Division", b =>
                {
                    b.Navigation("Alignments");

                    b.Navigation("Standings");
                });

            modelBuilder.Entity("SHLAPI.Models.PlayoffRound", b =>
                {
                    b.Navigation("PlayoffSeries");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("SHLAPI.Models.Season", b =>
                {
                    b.Navigation("Alignments");

                    b.Navigation("Champions");

                    b.Navigation("PlayoffRounds");

                    b.Navigation("PlayoffSeries");

                    b.Navigation("Schedules");

                    b.Navigation("Standings");
                });

            modelBuilder.Entity("SHLAPI.Models.Team", b =>
                {
                    b.Navigation("Alignments");

                    b.Navigation("Champions");

                    b.Navigation("ChampionsRounds");

                    b.Navigation("PlayoffSeriesTeam1s");

                    b.Navigation("PlayoffSeriesTeam2s");

                    b.Navigation("ScheduleAwayTeams");

                    b.Navigation("ScheduleHomeTeams");

                    b.Navigation("Standings");
                });
#pragma warning restore 612, 618
        }
    }
}
